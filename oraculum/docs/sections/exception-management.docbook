<?xml version="1.0"?>

<!--
  - Copyright 2009 Vladimir Ritz Bossicard
  -
  - This file is part of WorkingOnIt.
  -
  - WorkingOnIt is free software: you can redistribute it and/or modify it under the
  - terms of the GNU General Public License as published by the Free Software
  - Foundation, either version 3 of the License, or (at your option) any later
  - version.
  -
  - This program is distributed in the hope that it will be useful, but WITHOUT
  - ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  - FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
  - more details.
  -
  - You should have received a copy of the GNU General Public License along with
  - this program. If not, see <http://www.gnu.org/licenses/>.
  -
  - Author      : Vladimir Ritz Bossicard
  - Version     : $Revision: 299 $
  - Last edit   : $Date: 2009-12-13 21:22:42 +0100 (Sun, 13 Dec 2009) $
  - Last editor : $Author: vbossica $
  -->

<section xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">

    <title>Managing PL/SQL Exceptions</title>

    <para>PL/SQL features an exception mechanism and there is no reason not to take advantage of it. The only problem is that exceptions are buried deep into the code bowels and it's quite difficult to keep an oversight over what exception were already defined and what numbers are already taken. Since Steven Feuerstein recommends in his <ulink url="http://oreilly.com/catalog/9780596009779/"><citetitle>Oracle PL/SQL Programming</citetitle></ulink> to manage the exception values into a database table, let's follow his advice. The table only differs with the addition of the <code>msgmodule</code> column, which purpose will be described later.</para>

    <xi:include href="fragments/msginfo-table.docbook"/>

    <para>I guess I will never be a true DBA because when it comes to generating files, I always go back to my Java toolkit. Anyway, here's the resulting <code>errnums.pks</code> package file...</para>

    <xi:include href="fragments/errnums-pks.docbook"/>

    <para>generated by an Ant target so that this step can easily be included into an automated process (e.g. nightly build).</para>

    <xi:include href="fragments/msginfo-task.docbook"/>

    <para>One of the advantages of working with templates is that it is trivial to generate other output files and since no project should come without documentation, let's generate -using the next Ant target- some Docbook fragment and include them (automatically) into the database documentation:</para>

    <xi:include href="fragments/msginfo-dkb-task.docbook"/>
    
    <para> You will notice that the exceptions have been grouped by modules but they can as easily be listed together and included into an appendix.</para>
    
    <figure><title>Application's exceptions documentation</title>
        <screenshot><mediaobject><imageobject>
            <imagedata fileref="images/documentation-pdf.png" align="center" width="80%"/>
        </imageobject></mediaobject></screenshot>
    </figure>
    
    <para>Now that we have our specific exceptions documented, it is trivial to follow the same process and document some of Oracle's numerous unnamed exceptions. These exceptions will automatically be included into the application <code>errnums.pks</code> package and also the database guide:</para>

    <figure><title>Oracle's unnamed exceptions documentation</title>
        <screenshot><mediaobject><imageobject>
            <imagedata fileref="images/documentation-oracle-pdf.png" align="center" width="80%"/>
        </imageobject></mediaobject></screenshot>
    </figure>
    
</section>